syntax = "proto3";
package genericqueue.v1;

option java_multiple_files = true;
option java_package = "vn.unicloud.genericqueue.protobuf";
option java_outer_classname = "GenericQueueProto";

option go_package = "github.com/tiktzuki/genericequeue/go/proto";
import "error.proto";
import "schema_service.proto";
import "topic_service.proto";

/*
 * Reserved for future use.
 * Header that contains information for distributed tracing, filtering, routing, etc.
 * For example, X-B3-* headers assigned by a publisher are stored with the message and
 * can provide a full distributed trace of the message across its entire lifecycle.
 */
message MessageHeader {
  string key = 1;
  bytes value = 2;
}

/*
 * Represents an message that an message publishing app creates.
 */
message ProducerMessage {
  // The message's system generated guid
  string id = 1;
  // Schema fingerprint for this message which is hash of the schema
  string schema_id = 2;
  // The message data field
  bytes payload = 3;
  // Reserved for future use. Key-value pairs of headers.
  repeated MessageHeader headers = 4;
}

/*
 * Represents an message that is consumed in a subscriber client.
 * In addition to the fields in ProducerMessage, ConsumerMessage has the replay_id field.
 */
message ConsumerMessage {
  // The message's system generated guid
  string id = 1;
  // Schema fingerprint for this message which is hash of the schema
  string schema_id = 2;
  // The message data field
  bytes payload = 3;
  // Reserved for future use. Key-value pairs of headers.
  repeated MessageHeader headers = 4;
  /* The replay ID of the message.
   * A subscriber app can store the replay ID. When the app restarts, it can resume subscription
   * starting from messages in the message bus after the message with that replay ID.
   */
  bytes replay_id = 5;
}



/*
 * Supported subscription replay start values.
 * By default, the subscription will start at the tip of the stream if ReplayPreset is not specified.
 */
enum ReplayPreset {
  // Start the subscription at the tip of the stream.
  LATEST = 0;
  // Start the subscription at the earliest point in the stream.
  EARLIEST = 1;
  // Start the subscription after a custom point in the stream. This must be set with a valid replay_id in the FetchRequest.
  CUSTOM = 2;
}

/*
 * Request for the Subscribe streaming RPC method. This request is used to:
 * 1. Establish the initial subscribe stream.
 * 2. Request more messages from the subscription stream.
 * Flow Control is handled by the subscriber via num_requested.
 * A client can specify a starting point for the subscription with replay_preset and replay_id combinations.
 * If no replay_preset is specified, the subscription starts at LATEST (tip of the stream).
 * replay_preset and replay_id values are only consumed as part of the first FetchRequest. If
 * a client needs to start at another point in the stream, it must start a new subscription.
 */
message FetchRequest {
  /*
   * Identifies a topic for subscription in the very first FetchRequest of the stream. The topic cannot change
   * in subsequent FetchRequests within the same subscribe stream, but can be omitted for efficiency.
   */
  string topic_name = 1;
  uint32 queue_index = 2;
  /*
   * Subscription starting point. This is consumed only as part of the first FetchRequest
   * when the subscription is set up.
   */
  ReplayPreset replay_preset = 3;
  /*
   * If replay_preset of CUSTOM is selected, specify the subscription point to start after.
   * This is consumed only as part of the first FetchRequest when the subscription is set up.
   */
  bytes replay_id = 4;
}

message GetListRequest {
  string topic_name = 1;
  int32 queue_index = 2;
  int32 offset = 3;
  int32 limit = 4;
}
/*
 * Response for the Subscribe streaming RPC method. This returns ConsumerMessage(s).
 * If there are no messages to deliver, the server sends an empty batch fetch response with the latest replay ID. The
 * empty fetch response is sent within 270 seconds. An empty fetch response provides a periodic keepalive from the
 * server and the latest replay ID.
 */
message FetchResponse {
  // Received messages for subscription for client consumption
  repeated ConsumerMessage messages = 1;
  // Latest replay ID of a subscription. Enables clients with an updated replay value so that they can keep track
  // of their last consumed replay. Clients will not have to start a subscription at a very old replay in the case where a resubscribe is necessary.
  bytes latest_replay_id = 2;
  // RPC ID used to trace errors.
  string rpc_id = 3;
  // Number of remaining messages to be delivered to the client for a Subscribe RPC call.
  uint32 pending_num_requested = 4;
}

// Request for the Publish and PublishStream RPC method.
message PublishRequest {
  // Topic to publish on
  string topic_name = 1;
  int32 queue_index = 2;
  // Batch of ProducerMessage(s) to send
  repeated ProducerMessage messages = 3;
  // For internal Salesforce use only.
  string auth_refresh = 4;
}

/*
 * Message publish result that the Publish RPC method returns. The result contains replay_id or a publish error.
 */
message PublishResult {
  // Replay ID of the message
  bytes replay_id = 1;
  // Publish error if any
  Error error = 2;
}

/*
 * Response for the Publish and PublishStream RPC methods. This returns
 * a list of PublishResults for each message that the client attempted to
 * publish. PublishResult indicates if publish succeeded or not
 * for each message. It also returns the schema ID that was used to create
 * the ProducerMessages in the PublishRequest.
 */
message PublishResponse {
  // Publish results
  repeated PublishResult results = 1;
  // Schema fingerprint for this message, which is a hash of the schema
  string schema_id = 2;
  // RPC ID used to trace errors.
  string rpc_id = 3;
}

/*
 * The Pub/Sub API provides a single interface for publishing and subscribing to platform messages, including real-time
 * message monitoring messages, and change data capture messages. The Pub/Sub API is a gRPC API that is based on HTTP/2.
 *
 * A session token is needed to authenticate. Any of the Salesforce supported
 * OAuth flows can be used to obtain a session token:
 * https://help.salesforce.com/articleView?id=sf.remoteaccess_oauth_flows.htm&type=5
 *
 * For each RPC, a client needs to pass authentication information
 * as metadata headers (https://www.grpc.io/docs/guides/concepts/#metadata) with their method call.
 *
 * For Salesforce session token authentication, use:
 *   accesstoken : access token
 *   instanceurl : Salesforce instance URL
 *   tenantid : tenant/org id of the client
 *
 * StatusException is thrown in case of response failure for any request.
 */
service GenericQueueService {

  /*
   * Send a publish request to synchronously publish messages to a topic.
   */
  rpc Publish (PublishRequest) returns (PublishResponse);

  /*
   * Bidirectional Streaming RPC to publish messages to the message bus.
   * PublishRequest contains the batch of messages to publish.
   *
   * The first PublishRequest of the stream identifies the topic to publish on.
   * If any subsequent PublishRequest provides topic_name, it must match what
   * was provided in the first PublishRequest; otherwise, the RPC returns an error
   * with INVALID_ARGUMENT status.
   *
   * The server returns a PublishResponse for each PublishRequest when publish is
   * complete for the batch. A client does not have to wait for a PublishResponse
   * before sending a new PublishRequest, i.e. multiple publish batches can be queued
   * up, which allows for higher publish rate as a client can asynchronously
   * publish more messages while publishes are still in flight on the server side.
   *
   * PublishResponse holds a PublishResult for each message published that indicates success
   * or failure of the publish. A client can then retry the publish as needed before sending
   * more PublishRequests for new messages to publish.
   *
   * A client must send a valid publish request with one or more messages every 70 seconds to hold on to the stream.
   * Otherwise, the server closes the stream and notifies the client. Once the client is notified of the stream closure,
   * it must make a new PublishStream call to resume publishing.
   */
  rpc PublishStream (stream PublishRequest) returns (stream PublishResponse);

  /*
   * Bidirectional streaming RPC to subscribe to a Topic. The subscription is pull-based. A client can request
   * for more messages as it consumes messages. This enables a client to handle flow control based on the client's processing speed.
   *
   * Typical flow:
   * 1. Client requests for X number of messages via FetchRequest.
   * 2. Server receives request and delivers messages until X messages are delivered to the client via one or more FetchResponse messages.
   * 3. Client consumes the FetchResponse messages as they come.
   * 4. Client issues new FetchRequest for Y more number of messages. This request can
   *    come before the server has delivered the earlier requested X number of messages
   *    so the client gets a continuous stream of messages if any.
   *
   * If a client requests more messages before the server finishes the last
   * requested amount, the server appends the new amount to the current amount of
   * messages it still needs to fetch and deliver.
   *
   * A client can subscribe at any point in the stream by providing a replay option in the first FetchRequest.
   * The replay option is honored for the first FetchRequest received from a client. Any subsequent FetchRequests with a
   * new replay option are ignored. A client needs to call the Subscribe RPC again to restart the subscription
   * at a new point in the stream.
   *
   * The first FetchRequest of the stream identifies the topic to subscribe to.
   * If any subsequent FetchRequest provides topic_name, it must match what
   * was provided in the first FetchRequest; otherwise, the RPC returns an error
   * with INVALID_ARGUMENT status.
   */
  rpc SubscribeStream (stream FetchRequest) returns (stream FetchResponse);

  rpc Subscribe (FetchRequest) returns (stream FetchResponse);

  rpc Poll (FetchRequest) returns (FetchResponse);

  rpc GetList (GetListRequest) returns (stream FetchResponse);
}

// Style guide: https://developers.google.com/protocol-buffers/docs/style
